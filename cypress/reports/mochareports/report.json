{
  "stats": {
    "suites": 4,
    "tests": 31,
    "passes": 27,
    "pending": 0,
    "failures": 4,
    "start": "2022-06-22T16:17:23.778Z",
    "end": "2022-06-22T16:17:52.322Z",
    "duration": 12874,
    "testsRegistered": 31,
    "passPercent": 87.09677419354838,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4a0f36a-79c2-4200-8bb4-ab927360235a",
      "title": "",
      "fullFile": "cypress/integration/carrinhos/carrinhos.spec.js",
      "file": "cypress/integration/carrinhos/carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6ce3f1da-39ba-4d90-b39b-258b1de199d3",
          "title": "Casos de teste sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6574b7fd-5613-423f-a306-cced292d773e",
              "title": "Deve cadastrar e excluir carrinho com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "02fc01bf-ebb2-446e-9eba-acc929799a62",
                  "title": "Deve cadastrar carrinho e concluir uma compra com sucesso",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve cadastrar um novo carrinho com sucesso",
                      "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve cadastrar e excluir carrinho com sucesso Deve cadastrar carrinho e concluir uma compra com sucesso Deve cadastrar um novo carrinho com sucesso",
                      "timedOut": null,
                      "duration": 1540,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res.body);\n});\ncy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _carrinhos.default.cadastrarCarrinho(id, 1).then(res => {\n    cy.validarSchema(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarCadastroDeCarrinho(res);\n  });\n});",
                      "err": {},
                      "uuid": "b5be3001-8ab6-47fc-a72e-c737a4148d12",
                      "parentUUID": "02fc01bf-ebb2-446e-9eba-acc929799a62",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve excluir carrinho com sucesso e concluir a compra",
                      "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve cadastrar e excluir carrinho com sucesso Deve cadastrar carrinho e concluir uma compra com sucesso Deve excluir carrinho com sucesso e concluir a compra",
                      "timedOut": null,
                      "duration": 247,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.excluirCarrinhoConcluirCompra().then(res => {\n  cy.validarSchema(res, 'delete-carrinhos-concluir', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarExclusaoDeCarrinhoConcluirCompra(res);\n});",
                      "err": {},
                      "uuid": "d19fcbaa-8756-4168-aa68-622660e6e9fb",
                      "parentUUID": "02fc01bf-ebb2-446e-9eba-acc929799a62",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b5be3001-8ab6-47fc-a72e-c737a4148d12",
                    "d19fcbaa-8756-4168-aa68-622660e6e9fb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1787,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3cd30161-59f1-40c5-b061-34225630a78f",
                  "title": "Deve cadastrar carrinho e cancelar uma compra com sucesso",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve cadastrar um novo carrinho com sucesso",
                      "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve cadastrar e excluir carrinho com sucesso Deve cadastrar carrinho e cancelar uma compra com sucesso Deve cadastrar um novo carrinho com sucesso",
                      "timedOut": null,
                      "duration": 245,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _carrinhos.default.cadastrarCarrinho(id, 1).then(res => {\n    cy.validarSchema(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarCadastroDeCarrinho(res);\n  });\n});",
                      "err": {},
                      "uuid": "e5f97d49-f705-4618-ba4e-586abe07bd25",
                      "parentUUID": "3cd30161-59f1-40c5-b061-34225630a78f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve excluir carrinho com sucesso e cancelar a compra",
                      "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve cadastrar e excluir carrinho com sucesso Deve cadastrar carrinho e cancelar uma compra com sucesso Deve excluir carrinho com sucesso e cancelar a compra",
                      "timedOut": null,
                      "duration": 525,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.excluirCarrinhoCancelarCompra().then(res => {\n  cy.validarSchema(res, 'delete-carrinhos-concluir', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarExclusaoDeCarrinhoCancelarCompra(res);\n});",
                      "err": {
                        "message": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'",
                        "estack": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'\n    at Function.validarExclusaoDeCarrinhoCancelarCompra (https://serverest.dev/__cypress/tests?p=cypress/integration/carrinhos/carrinhos.spec.js:744:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress/integration/carrinhos/carrinhos.spec.js:246:36)",
                        "diff": "- 'Registro excluído com sucesso. Estoque dos produtos reabastecido'\n+ 'Registro excluído com sucesso'\n"
                      },
                      "uuid": "d1899927-a40f-4fc2-bf48-83fedaa2a0a8",
                      "parentUUID": "3cd30161-59f1-40c5-b061-34225630a78f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e5f97d49-f705-4618-ba4e-586abe07bd25"
                  ],
                  "failures": [
                    "d1899927-a40f-4fc2-bf48-83fedaa2a0a8"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 770,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36a2a8e2-6792-4790-8672-83cd0e63f6ff",
              "title": "Não deve cadastrar carrinho duplicado e não deve excluir carrinho inexistente",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve cadastrar novo carrinho caso o usuario já tenha um carrinho cadastrado",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar carrinho duplicado e não deve excluir carrinho inexistente Não deve cadastrar novo carrinho caso o usuario já tenha um carrinho cadastrado",
                  "timedOut": null,
                  "duration": 538,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _carrinhos.default.cadastrarCarrinho(id, 1).then(res => {});\n  _carrinhos.default.cadastrarCarrinho(id, 1).then(res => {\n    cy.validarSchema(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarCadastroDeCarrinhoDuplicado(res);\n  });\n});",
                  "err": {},
                  "uuid": "ffc612c0-0f7a-46c2-82f3-10331dbf7835",
                  "parentUUID": "36a2a8e2-6792-4790-8672-83cd0e63f6ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve excluir carrinho caso não tenha carrinho cadastrado",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar carrinho duplicado e não deve excluir carrinho inexistente Não deve excluir carrinho caso não tenha carrinho cadastrado",
                  "timedOut": null,
                  "duration": 452,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_carrinhos.default.excluirCarrinhoConcluirCompra().then(res => {});\n_carrinhos.default.excluirCarrinhoConcluirCompra().then(res => {\n  cy.validarSchema(res, 'delete-carrinhos-concluir', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarExclusaoDeCarrinhoConcluirCompraSemCarrinho(res);\n});",
                  "err": {},
                  "uuid": "4d6fc903-f56b-4250-b915-72879f31abf0",
                  "parentUUID": "36a2a8e2-6792-4790-8672-83cd0e63f6ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir produto",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar carrinho duplicado e não deve excluir carrinho inexistente Deve excluir produto",
                  "timedOut": null,
                  "duration": 243,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProduto(res);\n  });\n});",
                  "err": {},
                  "uuid": "3302c130-a516-4ae8-8efe-fc55e488ac94",
                  "parentUUID": "36a2a8e2-6792-4790-8672-83cd0e63f6ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar carrinho duplicado e não deve excluir carrinho inexistente Deve excluir usuário",
                  "timedOut": null,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('usuarioAdmId').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
                  "err": {},
                  "uuid": "7cde7a17-f65a-4b4f-8979-9ace94a6440c",
                  "parentUUID": "36a2a8e2-6792-4790-8672-83cd0e63f6ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffc612c0-0f7a-46c2-82f3-10331dbf7835",
                "4d6fc903-f56b-4250-b915-72879f31abf0",
                "3302c130-a516-4ae8-8efe-fc55e488ac94",
                "7cde7a17-f65a-4b4f-8979-9ace94a6440c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1497,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87db16e1-f953-4055-936d-e8c1d6341891",
              "title": "Não deve cadastrar ou excluir carrinho sem autenticação de usuario",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve cadastrar carrinho sem autenticação de usuario",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar ou excluir carrinho sem autenticação de usuario Não deve cadastrar carrinho sem autenticação de usuario",
                  "timedOut": null,
                  "duration": 271,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _carrinhos.default.cadastrarCarrinho(id, 1).then(res => {\n    cy.validarSchema(res, 'post-carrinhos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarCadastroDeCarrinhoSemAutenticacao(res);\n  });\n});",
                  "err": {},
                  "uuid": "a22a5af5-1a11-4177-8f24-11a28c758e99",
                  "parentUUID": "87db16e1-f953-4055-936d-e8c1d6341891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve excluir carrinho sem autenticação de usuario",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar ou excluir carrinho sem autenticação de usuario Não deve excluir carrinho sem autenticação de usuario",
                  "timedOut": null,
                  "duration": 232,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_carrinhos.default.excluirCarrinhoConcluirCompra().then(res => {\n  cy.validarSchema(res, 'delete-carrinhos-concluir', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarExclusaoDeCarrinhoConcluirCompraSemAutenticacao(res);\n});",
                  "err": {},
                  "uuid": "747225de-ebb4-4cc6-a714-2e9239f9bdb9",
                  "parentUUID": "87db16e1-f953-4055-936d-e8c1d6341891",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a22a5af5-1a11-4177-8f24-11a28c758e99",
                "747225de-ebb4-4cc6-a714-2e9239f9bdb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 503,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f4957d23-0897-4ef0-ac40-429be1469add",
      "title": "",
      "fullFile": "cypress/integration/login/login.spec.js",
      "file": "cypress/integration/login/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5c609d30-b9a5-4488-b5c6-f75b9a982777",
          "title": "Casos de teste sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar login com sucesso",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar login com sucesso",
              "timedOut": null,
              "duration": 791,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_usuarios.default.cadastrarUsuario().then(res => {\n  cy.writeFile('./cypress/fixtures/usuarioId.json', res.body);\n  cy.fixture('usuarioId.json').then(res => {\n    let id = res._id;\n    _usuarios.default.buscarUsuarioPorId(id).then(res => {\n      cy.writeFile('./cypress/fixtures/usuarioLogin.json', res.body);\n      cy.fixture('usuarioLogin.json').then(res => {\n        let usuario = {\n          email: res.email,\n          password: res.password\n        };\n        _login.default.login(usuario).then(res => {\n          cy.validarSchema(res, 'post-login', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n          _validaServerest.default.validarLogin(res);\n          _login.default.salvarBearer(res);\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "43f2af14-2ef5-49cb-9eca-770f12a1c48d",
              "parentUUID": "5c609d30-b9a5-4488-b5c6-f75b9a982777",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login com email ou senha inválidos",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Não deve realizar login com email ou senha inválidos",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('login.json').then(res => {\n  let usuario = res.emailInvalido;\n  _login.default.login(usuario).then(res => {\n    cy.validarSchema(res, 'post-login', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarLoginDadosInvalidos(res);\n  });\n});",
              "err": {},
              "uuid": "6c267763-8daa-4365-aa24-35b8e2045aaa",
              "parentUUID": "5c609d30-b9a5-4488-b5c6-f75b9a982777",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login com campos vazios",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Não deve realizar login com campos vazios",
              "timedOut": null,
              "duration": 495,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture('login.json').then(res => {\n  let usuario = res.vazio;\n  _login.default.login(usuario).then(res => {\n    cy.validarSchema(res, 'post-login', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarLoginCamposVazios(res);\n  });\n});",
              "err": {
                "message": "Error: Erros encontrados na validação de contrato: \n  must have required property 'message', but receive object",
                "estack": "Error: Erros encontrados na validação de contrato: \n  must have required property 'message', but receive object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress/support/index.js:140:13)",
                "diff": null
              },
              "uuid": "9809b3f8-161e-44b5-83c2-e72f1dff9f82",
              "parentUUID": "5c609d30-b9a5-4488-b5c6-f75b9a982777",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login com valores de tipos inválidos",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Não deve realizar login com valores de tipos inválidos",
              "timedOut": null,
              "duration": 440,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture('login.json').then(res => {\n  let usuario = res.tiposInvalidos;\n  _login.default.login(usuario).then(res => {\n    cy.validarSchema(res, 'post-login', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarLoginTiposInvalidos(res);\n  });\n});",
              "err": {
                "message": "Error: Erros encontrados na validação de contrato: \n  must have required property 'message', but receive object",
                "estack": "Error: Erros encontrados na validação de contrato: \n  must have required property 'message', but receive object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress/support/index.js:140:13)",
                "diff": null
              },
              "uuid": "98b4d950-884c-4bd1-b737-ed91120f7c13",
              "parentUUID": "5c609d30-b9a5-4488-b5c6-f75b9a982777",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir usuário",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve excluir usuário",
              "timedOut": null,
              "duration": 261,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuarioId').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
              "err": {},
              "uuid": "51df266d-11f2-4697-bbc9-4ec539c64632",
              "parentUUID": "5c609d30-b9a5-4488-b5c6-f75b9a982777",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43f2af14-2ef5-49cb-9eca-770f12a1c48d",
            "6c267763-8daa-4365-aa24-35b8e2045aaa",
            "51df266d-11f2-4697-bbc9-4ec539c64632"
          ],
          "failures": [
            "9809b3f8-161e-44b5-83c2-e72f1dff9f82",
            "98b4d950-884c-4bd1-b737-ed91120f7c13"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2268,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "24648579-85c2-4fab-901d-769516cb6611",
      "title": "",
      "fullFile": "cypress/integration/produtos/produtos.spec.js",
      "file": "cypress/integration/produtos/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8326abe5-ac6f-4439-8675-502b9a2fc5f1",
          "title": "Casos de teste sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "19b1e4c2-b125-4921-b946-f4e1783b9052",
              "title": "Deve realizar o CRUD da rota produtos com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar produtos cadastrados",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve listar produtos cadastrados",
                  "timedOut": null,
                  "duration": 1169,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.buscarProdutos().then(res => {\n  cy.validarSchema(res, 'get-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato: \n  must have required property 'usuarios', but receive object",
                    "estack": "Error: Erros encontrados na validação de contrato: \n  must have required property 'usuarios', but receive object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress/support/index.js:140:13)",
                    "diff": null
                  },
                  "uuid": "f2300c21-9f7d-4d99-af38-4602272d75a5",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar um novo produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve cadastrar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 263,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res.body);\n  cy.validarSchema(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeProduto(res);\n});",
                  "err": {},
                  "uuid": "d0860df7-2360-42a5-af56-ba43de38dba2",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve buscar produto por id com sucesso",
                  "timedOut": null,
                  "duration": 284,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.buscarProdutoPorId(id).then(res => {\n    cy.writeFile('./cypress/fixtures/produtoId.json', res.body);\n    cy.validarSchema(res, 'get-produtos-by-id', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarBuscaDeProdutoPorId(res);\n  });\n});",
                  "err": {},
                  "uuid": "5c6c4689-c926-44a1-bdc6-493fc8b57664",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve atualizar produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve atualizar produto com sucesso",
                  "timedOut": null,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.atualizarProduto(id).then(res => {\n    cy.validarSchema(res, 'put-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAtualizacaoDeProduto(res);\n  });\n});",
                  "err": {},
                  "uuid": "970ed38b-4321-426e-86c6-de132f919b69",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve excluir produto com sucesso",
                  "timedOut": null,
                  "duration": 270,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProduto(res);\n  });\n});",
                  "err": {},
                  "uuid": "e9863dfb-c03b-42a5-beed-92a1dffb84ea",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve excluir usuário",
                  "timedOut": null,
                  "duration": 329,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('usuarioAdmId').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
                  "err": {},
                  "uuid": "bb325b9c-59b7-4b79-9513-4a660d39c78f",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0860df7-2360-42a5-af56-ba43de38dba2",
                "5c6c4689-c926-44a1-bdc6-493fc8b57664",
                "970ed38b-4321-426e-86c6-de132f919b69",
                "e9863dfb-c03b-42a5-beed-92a1dffb84ea",
                "bb325b9c-59b7-4b79-9513-4a660d39c78f"
              ],
              "failures": [
                "f2300c21-9f7d-4d99-af38-4602272d75a5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2579,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "569f46ba-d357-4026-a418-32c53cc5d944",
              "title": "Usuario sem administrador não deve cadastra, atualizar ou deletar um produto",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Usuario sem administrador não deve cadastrar produto",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Usuario sem administrador não deve cadastrar produto",
                  "timedOut": null,
                  "duration": 931,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.validarSchema(res, 'post-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "4f83fedb-2593-477b-9f90-5f95f41c5ea3",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuario sem administrador não deve atualizar produto",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Usuario sem administrador não deve atualizar produto",
                  "timedOut": null,
                  "duration": 240,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.atualizarProduto(id).then(res => {\n    cy.validarSchema(res, 'put-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAtualizacaoDeProdutoSemAdm(res);\n  });\n});",
                  "err": {},
                  "uuid": "cf5483d8-76db-4d89-9ff3-8cbece46b02e",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuario sem administrador não deve deletar produto",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Usuario sem administrador não deve deletar produto",
                  "timedOut": null,
                  "duration": 234,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProdutoSemAdm(res);\n  });\n});",
                  "err": {},
                  "uuid": "f69575ad-7684-4078-9847-0a0c7cd19d37",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Deve excluir usuário",
                  "timedOut": null,
                  "duration": 254,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('usuarioId').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
                  "err": {},
                  "uuid": "cb945947-0a67-4e44-927e-59e1695ed3fd",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f83fedb-2593-477b-9f90-5f95f41c5ea3",
                "cf5483d8-76db-4d89-9ff3-8cbece46b02e",
                "f69575ad-7684-4078-9847-0a0c7cd19d37",
                "cb945947-0a67-4e44-927e-59e1695ed3fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1659,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
              "title": "Não deve cadastra, atualizar ou deletar um produto sem autenticação",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve cadastrar produto sem autenticação",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve cadastra, atualizar ou deletar um produto sem autenticação Não deve cadastrar produto sem autenticação",
                  "timedOut": null,
                  "duration": 259,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.validarSchema(res, 'post-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeProdutoSemAutenticacao(res);\n});",
                  "err": {},
                  "uuid": "a90a4da7-8a45-40a5-b040-27bb93b7c0c4",
                  "parentUUID": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve atualizar produto sem autenticação",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve cadastra, atualizar ou deletar um produto sem autenticação Não deve atualizar produto sem autenticação",
                  "timedOut": null,
                  "duration": 269,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.atualizarProduto(id).then(res => {\n    cy.validarSchema(res, 'put-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAtualizacaoDeProdutoSemAutenticacao(res);\n  });\n});",
                  "err": {},
                  "uuid": "15a34e9f-0c9d-4d16-aa41-661e1b8815fc",
                  "parentUUID": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve deletar produto sem autenticação",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve cadastra, atualizar ou deletar um produto sem autenticação Não deve deletar produto sem autenticação",
                  "timedOut": null,
                  "duration": 263,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProdutoSemAutenticacao(res);\n  });\n});",
                  "err": {},
                  "uuid": "a3e754a6-d224-455d-8be6-b2e59947a3e9",
                  "parentUUID": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a90a4da7-8a45-40a5-b040-27bb93b7c0c4",
                "15a34e9f-0c9d-4d16-aa41-661e1b8815fc",
                "a3e754a6-d224-455d-8be6-b2e59947a3e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 791,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "194edda0-9c9c-4b5d-81d3-5427894a14b3",
      "title": "",
      "fullFile": "cypress/integration/usuarios/usuarios.spec.js",
      "file": "cypress/integration/usuarios/usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um novo usuario",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um novo usuario",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_usuarios.default.cadastrarUsuario().then(res => {\n  cy.writeFile('./cypress/fixtures/usuarioId.json', res.body);\n  cy.validarSchema(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeUsuario(res);\n});",
              "err": {},
              "uuid": "ece1935e-650f-4da7-ae43-8d41d7cc9869",
              "parentUUID": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar um novo usuario com email já cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve cadastrar um novo usuario com email já cadastrado",
              "timedOut": null,
              "duration": 463,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuarioId.json').then(res => {\n  let id = res._id;\n  _usuarios.default.buscarUsuarioPorId(id).then(res => {\n    cy.writeFile('./cypress/fixtures/usuarioLogin.json', res.body);\n    cy.fixture('usuarioLogin.json').then(res => {\n      cy.log(JSON.stringify(res));\n      let usuario = {\n        nome: res.nome,\n        email: res.email,\n        password: res.password,\n        administrador: res.administrador\n      };\n      _usuarios.default.cadastrarUsuario(usuario).then(res => {\n        cy.validarSchema(res, 'post-usuarios', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n        _validaServerest.default.validarCadastroDeUsuarioEmailInvalido(res);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "95d8c8a9-2800-47c3-baa1-9cb51003974b",
              "parentUUID": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir usuario",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve excluir usuario",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuarioId.json').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
              "err": {},
              "uuid": "0036e9be-6663-447a-95f2-0bff13674429",
              "parentUUID": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ece1935e-650f-4da7-ae43-8d41d7cc9869",
            "95d8c8a9-2800-47c3-baa1-9cb51003974b",
            "0036e9be-6663-447a-95f2-0bff13674429"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1020,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}