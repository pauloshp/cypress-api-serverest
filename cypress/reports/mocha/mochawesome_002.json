{
  "stats": {
    "suites": 4,
    "tests": 13,
    "passes": 12,
    "pending": 0,
    "failures": 1,
    "start": "2022-06-22T16:17:41.806Z",
    "end": "2022-06-22T16:17:46.947Z",
    "duration": 5141,
    "testsRegistered": 13,
    "passPercent": 92.3076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "24648579-85c2-4fab-901d-769516cb6611",
      "title": "",
      "fullFile": "cypress/integration/produtos/produtos.spec.js",
      "file": "cypress/integration/produtos/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8326abe5-ac6f-4439-8675-502b9a2fc5f1",
          "title": "Casos de teste sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "19b1e4c2-b125-4921-b946-f4e1783b9052",
              "title": "Deve realizar o CRUD da rota produtos com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar produtos cadastrados",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve listar produtos cadastrados",
                  "timedOut": null,
                  "duration": 1169,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.buscarProdutos().then(res => {\n  cy.validarSchema(res, 'get-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato: \n  must have required property 'usuarios', but receive object",
                    "estack": "Error: Erros encontrados na validação de contrato: \n  must have required property 'usuarios', but receive object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress/support/index.js:140:13)",
                    "diff": null
                  },
                  "uuid": "f2300c21-9f7d-4d99-af38-4602272d75a5",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar um novo produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve cadastrar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 263,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res.body);\n  cy.validarSchema(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeProduto(res);\n});",
                  "err": {},
                  "uuid": "d0860df7-2360-42a5-af56-ba43de38dba2",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve buscar produto por id com sucesso",
                  "timedOut": null,
                  "duration": 284,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.buscarProdutoPorId(id).then(res => {\n    cy.writeFile('./cypress/fixtures/produtoId.json', res.body);\n    cy.validarSchema(res, 'get-produtos-by-id', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarBuscaDeProdutoPorId(res);\n  });\n});",
                  "err": {},
                  "uuid": "5c6c4689-c926-44a1-bdc6-493fc8b57664",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve atualizar produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve atualizar produto com sucesso",
                  "timedOut": null,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.atualizarProduto(id).then(res => {\n    cy.validarSchema(res, 'put-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAtualizacaoDeProduto(res);\n  });\n});",
                  "err": {},
                  "uuid": "970ed38b-4321-426e-86c6-de132f919b69",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve excluir produto com sucesso",
                  "timedOut": null,
                  "duration": 270,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProduto(res);\n  });\n});",
                  "err": {},
                  "uuid": "e9863dfb-c03b-42a5-beed-92a1dffb84ea",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve realizar o CRUD da rota produtos com sucesso Deve excluir usuário",
                  "timedOut": null,
                  "duration": 329,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('usuarioAdmId').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
                  "err": {},
                  "uuid": "bb325b9c-59b7-4b79-9513-4a660d39c78f",
                  "parentUUID": "19b1e4c2-b125-4921-b946-f4e1783b9052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0860df7-2360-42a5-af56-ba43de38dba2",
                "5c6c4689-c926-44a1-bdc6-493fc8b57664",
                "970ed38b-4321-426e-86c6-de132f919b69",
                "e9863dfb-c03b-42a5-beed-92a1dffb84ea",
                "bb325b9c-59b7-4b79-9513-4a660d39c78f"
              ],
              "failures": [
                "f2300c21-9f7d-4d99-af38-4602272d75a5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2579,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "569f46ba-d357-4026-a418-32c53cc5d944",
              "title": "Usuario sem administrador não deve cadastra, atualizar ou deletar um produto",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Usuario sem administrador não deve cadastrar produto",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Usuario sem administrador não deve cadastrar produto",
                  "timedOut": null,
                  "duration": 931,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.validarSchema(res, 'post-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "4f83fedb-2593-477b-9f90-5f95f41c5ea3",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuario sem administrador não deve atualizar produto",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Usuario sem administrador não deve atualizar produto",
                  "timedOut": null,
                  "duration": 240,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.atualizarProduto(id).then(res => {\n    cy.validarSchema(res, 'put-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAtualizacaoDeProdutoSemAdm(res);\n  });\n});",
                  "err": {},
                  "uuid": "cf5483d8-76db-4d89-9ff3-8cbece46b02e",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuario sem administrador não deve deletar produto",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Usuario sem administrador não deve deletar produto",
                  "timedOut": null,
                  "duration": 234,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProdutoSemAdm(res);\n  });\n});",
                  "err": {},
                  "uuid": "f69575ad-7684-4078-9847-0a0c7cd19d37",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Usuario sem administrador não deve cadastra, atualizar ou deletar um produto Deve excluir usuário",
                  "timedOut": null,
                  "duration": 254,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('usuarioId').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
                  "err": {},
                  "uuid": "cb945947-0a67-4e44-927e-59e1695ed3fd",
                  "parentUUID": "569f46ba-d357-4026-a418-32c53cc5d944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f83fedb-2593-477b-9f90-5f95f41c5ea3",
                "cf5483d8-76db-4d89-9ff3-8cbece46b02e",
                "f69575ad-7684-4078-9847-0a0c7cd19d37",
                "cb945947-0a67-4e44-927e-59e1695ed3fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1659,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
              "title": "Não deve cadastra, atualizar ou deletar um produto sem autenticação",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve cadastrar produto sem autenticação",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve cadastra, atualizar ou deletar um produto sem autenticação Não deve cadastrar produto sem autenticação",
                  "timedOut": null,
                  "duration": 259,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.cadastrarProduto().then(res => {\n  cy.validarSchema(res, 'post-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeProdutoSemAutenticacao(res);\n});",
                  "err": {},
                  "uuid": "a90a4da7-8a45-40a5-b040-27bb93b7c0c4",
                  "parentUUID": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve atualizar produto sem autenticação",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve cadastra, atualizar ou deletar um produto sem autenticação Não deve atualizar produto sem autenticação",
                  "timedOut": null,
                  "duration": 269,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.atualizarProduto(id).then(res => {\n    cy.validarSchema(res, 'put-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAtualizacaoDeProdutoSemAutenticacao(res);\n  });\n});",
                  "err": {},
                  "uuid": "15a34e9f-0c9d-4d16-aa41-661e1b8815fc",
                  "parentUUID": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve deletar produto sem autenticação",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve cadastra, atualizar ou deletar um produto sem autenticação Não deve deletar produto sem autenticação",
                  "timedOut": null,
                  "duration": 263,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture('produtoId.json').then(res => {\n  let id = res._id;\n  _produtos.default.excluirProduto(id).then(res => {\n    cy.validarSchema(res, 'delete-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeProdutoSemAutenticacao(res);\n  });\n});",
                  "err": {},
                  "uuid": "a3e754a6-d224-455d-8be6-b2e59947a3e9",
                  "parentUUID": "f21b8835-0840-4a5a-b7b7-0d4e1f53866c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a90a4da7-8a45-40a5-b040-27bb93b7c0c4",
                "15a34e9f-0c9d-4d16-aa41-661e1b8815fc",
                "a3e754a6-d224-455d-8be6-b2e59947a3e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 791,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}