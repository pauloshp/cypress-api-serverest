{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-22T16:17:51.269Z",
    "end": "2022-06-22T16:17:52.322Z",
    "duration": 1053,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "194edda0-9c9c-4b5d-81d3-5427894a14b3",
      "title": "",
      "fullFile": "cypress/integration/usuarios/usuarios.spec.js",
      "file": "cypress/integration/usuarios/usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um novo usuario",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um novo usuario",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_usuarios.default.cadastrarUsuario().then(res => {\n  cy.writeFile('./cypress/fixtures/usuarioId.json', res.body);\n  cy.validarSchema(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarCadastroDeUsuario(res);\n});",
              "err": {},
              "uuid": "ece1935e-650f-4da7-ae43-8d41d7cc9869",
              "parentUUID": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar um novo usuario com email já cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve cadastrar um novo usuario com email já cadastrado",
              "timedOut": null,
              "duration": 463,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuarioId.json').then(res => {\n  let id = res._id;\n  _usuarios.default.buscarUsuarioPorId(id).then(res => {\n    cy.writeFile('./cypress/fixtures/usuarioLogin.json', res.body);\n    cy.fixture('usuarioLogin.json').then(res => {\n      cy.log(JSON.stringify(res));\n      let usuario = {\n        nome: res.nome,\n        email: res.email,\n        password: res.password,\n        administrador: res.administrador\n      };\n      _usuarios.default.cadastrarUsuario(usuario).then(res => {\n        cy.validarSchema(res, 'post-usuarios', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n        _validaServerest.default.validarCadastroDeUsuarioEmailInvalido(res);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "95d8c8a9-2800-47c3-baa1-9cb51003974b",
              "parentUUID": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir usuario",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve excluir usuario",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuarioId.json').then(res => {\n  let id = res._id;\n  _usuarios.default.excluirUsuario(id).then(res => {\n    cy.validarSchema(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarExclusaoDeUsuario(res);\n  });\n});",
              "err": {},
              "uuid": "0036e9be-6663-447a-95f2-0bff13674429",
              "parentUUID": "c41730ff-16a5-4387-9d4d-17f260e1abbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ece1935e-650f-4da7-ae43-8d41d7cc9869",
            "95d8c8a9-2800-47c3-baa1-9cb51003974b",
            "0036e9be-6663-447a-95f2-0bff13674429"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1020,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}